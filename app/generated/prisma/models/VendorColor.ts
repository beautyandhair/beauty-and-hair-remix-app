
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `VendorColor` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model VendorColor
 * 
 */
export type VendorColorModel = runtime.Types.Result.DefaultSelection<Prisma.$VendorColorPayload>

export type AggregateVendorColor = {
  _count: VendorColorCountAggregateOutputType | null
  _min: VendorColorMinAggregateOutputType | null
  _max: VendorColorMaxAggregateOutputType | null
}

export type VendorColorMinAggregateOutputType = {
  vendorName: string | null
  color: string | null
  imageSrc: string | null
}

export type VendorColorMaxAggregateOutputType = {
  vendorName: string | null
  color: string | null
  imageSrc: string | null
}

export type VendorColorCountAggregateOutputType = {
  vendorName: number
  color: number
  groups: number
  imageSrc: number
  shopImageIds: number
  _all: number
}


export type VendorColorMinAggregateInputType = {
  vendorName?: true
  color?: true
  imageSrc?: true
}

export type VendorColorMaxAggregateInputType = {
  vendorName?: true
  color?: true
  imageSrc?: true
}

export type VendorColorCountAggregateInputType = {
  vendorName?: true
  color?: true
  groups?: true
  imageSrc?: true
  shopImageIds?: true
  _all?: true
}

export type VendorColorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which VendorColor to aggregate.
   */
  where?: Prisma.VendorColorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VendorColors to fetch.
   */
  orderBy?: Prisma.VendorColorOrderByWithRelationInput | Prisma.VendorColorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.VendorColorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VendorColors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VendorColors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned VendorColors
  **/
  _count?: true | VendorColorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: VendorColorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: VendorColorMaxAggregateInputType
}

export type GetVendorColorAggregateType<T extends VendorColorAggregateArgs> = {
      [P in keyof T & keyof AggregateVendorColor]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateVendorColor[P]>
    : Prisma.GetScalarType<T[P], AggregateVendorColor[P]>
}




export type VendorColorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.VendorColorWhereInput
  orderBy?: Prisma.VendorColorOrderByWithAggregationInput | Prisma.VendorColorOrderByWithAggregationInput[]
  by: Prisma.VendorColorScalarFieldEnum[] | Prisma.VendorColorScalarFieldEnum
  having?: Prisma.VendorColorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: VendorColorCountAggregateInputType | true
  _min?: VendorColorMinAggregateInputType
  _max?: VendorColorMaxAggregateInputType
}

export type VendorColorGroupByOutputType = {
  vendorName: string
  color: string
  groups: runtime.JsonValue
  imageSrc: string | null
  shopImageIds: runtime.JsonValue | null
  _count: VendorColorCountAggregateOutputType | null
  _min: VendorColorMinAggregateOutputType | null
  _max: VendorColorMaxAggregateOutputType | null
}

type GetVendorColorGroupByPayload<T extends VendorColorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<VendorColorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof VendorColorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], VendorColorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], VendorColorGroupByOutputType[P]>
      }
    >
  > 



export type VendorColorWhereInput = {
  AND?: Prisma.VendorColorWhereInput | Prisma.VendorColorWhereInput[]
  OR?: Prisma.VendorColorWhereInput[]
  NOT?: Prisma.VendorColorWhereInput | Prisma.VendorColorWhereInput[]
  vendorName?: Prisma.StringFilter<"VendorColor"> | string
  color?: Prisma.StringFilter<"VendorColor"> | string
  groups?: Prisma.JsonFilter<"VendorColor">
  imageSrc?: Prisma.StringNullableFilter<"VendorColor"> | string | null
  shopImageIds?: Prisma.JsonNullableFilter<"VendorColor">
  vendor?: Prisma.XOR<Prisma.VendorScalarRelationFilter, Prisma.VendorWhereInput>
}

export type VendorColorOrderByWithRelationInput = {
  vendorName?: Prisma.SortOrder
  color?: Prisma.SortOrder
  groups?: Prisma.SortOrder
  imageSrc?: Prisma.SortOrderInput | Prisma.SortOrder
  shopImageIds?: Prisma.SortOrderInput | Prisma.SortOrder
  vendor?: Prisma.VendorOrderByWithRelationInput
}

export type VendorColorWhereUniqueInput = Prisma.AtLeast<{
  colorId?: Prisma.VendorColorColorIdCompoundUniqueInput
  AND?: Prisma.VendorColorWhereInput | Prisma.VendorColorWhereInput[]
  OR?: Prisma.VendorColorWhereInput[]
  NOT?: Prisma.VendorColorWhereInput | Prisma.VendorColorWhereInput[]
  vendorName?: Prisma.StringFilter<"VendorColor"> | string
  color?: Prisma.StringFilter<"VendorColor"> | string
  groups?: Prisma.JsonFilter<"VendorColor">
  imageSrc?: Prisma.StringNullableFilter<"VendorColor"> | string | null
  shopImageIds?: Prisma.JsonNullableFilter<"VendorColor">
  vendor?: Prisma.XOR<Prisma.VendorScalarRelationFilter, Prisma.VendorWhereInput>
}, "colorId">

export type VendorColorOrderByWithAggregationInput = {
  vendorName?: Prisma.SortOrder
  color?: Prisma.SortOrder
  groups?: Prisma.SortOrder
  imageSrc?: Prisma.SortOrderInput | Prisma.SortOrder
  shopImageIds?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.VendorColorCountOrderByAggregateInput
  _max?: Prisma.VendorColorMaxOrderByAggregateInput
  _min?: Prisma.VendorColorMinOrderByAggregateInput
}

export type VendorColorScalarWhereWithAggregatesInput = {
  AND?: Prisma.VendorColorScalarWhereWithAggregatesInput | Prisma.VendorColorScalarWhereWithAggregatesInput[]
  OR?: Prisma.VendorColorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.VendorColorScalarWhereWithAggregatesInput | Prisma.VendorColorScalarWhereWithAggregatesInput[]
  vendorName?: Prisma.StringWithAggregatesFilter<"VendorColor"> | string
  color?: Prisma.StringWithAggregatesFilter<"VendorColor"> | string
  groups?: Prisma.JsonWithAggregatesFilter<"VendorColor">
  imageSrc?: Prisma.StringNullableWithAggregatesFilter<"VendorColor"> | string | null
  shopImageIds?: Prisma.JsonNullableWithAggregatesFilter<"VendorColor">
}

export type VendorColorCreateInput = {
  color: string
  groups: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSrc?: string | null
  shopImageIds?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  vendor: Prisma.VendorCreateNestedOneWithoutColorsInput
}

export type VendorColorUncheckedCreateInput = {
  vendorName: string
  color: string
  groups: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSrc?: string | null
  shopImageIds?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type VendorColorUpdateInput = {
  color?: Prisma.StringFieldUpdateOperationsInput | string
  groups?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSrc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  shopImageIds?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  vendor?: Prisma.VendorUpdateOneRequiredWithoutColorsNestedInput
}

export type VendorColorUncheckedUpdateInput = {
  vendorName?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  groups?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSrc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  shopImageIds?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type VendorColorCreateManyInput = {
  vendorName: string
  color: string
  groups: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSrc?: string | null
  shopImageIds?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type VendorColorUpdateManyMutationInput = {
  color?: Prisma.StringFieldUpdateOperationsInput | string
  groups?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSrc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  shopImageIds?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type VendorColorUncheckedUpdateManyInput = {
  vendorName?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  groups?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSrc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  shopImageIds?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type VendorColorListRelationFilter = {
  every?: Prisma.VendorColorWhereInput
  some?: Prisma.VendorColorWhereInput
  none?: Prisma.VendorColorWhereInput
}

export type VendorColorOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type VendorColorColorIdCompoundUniqueInput = {
  vendorName: string
  color: string
}

export type VendorColorCountOrderByAggregateInput = {
  vendorName?: Prisma.SortOrder
  color?: Prisma.SortOrder
  groups?: Prisma.SortOrder
  imageSrc?: Prisma.SortOrder
  shopImageIds?: Prisma.SortOrder
}

export type VendorColorMaxOrderByAggregateInput = {
  vendorName?: Prisma.SortOrder
  color?: Prisma.SortOrder
  imageSrc?: Prisma.SortOrder
}

export type VendorColorMinOrderByAggregateInput = {
  vendorName?: Prisma.SortOrder
  color?: Prisma.SortOrder
  imageSrc?: Prisma.SortOrder
}

export type VendorColorCreateNestedManyWithoutVendorInput = {
  create?: Prisma.XOR<Prisma.VendorColorCreateWithoutVendorInput, Prisma.VendorColorUncheckedCreateWithoutVendorInput> | Prisma.VendorColorCreateWithoutVendorInput[] | Prisma.VendorColorUncheckedCreateWithoutVendorInput[]
  connectOrCreate?: Prisma.VendorColorCreateOrConnectWithoutVendorInput | Prisma.VendorColorCreateOrConnectWithoutVendorInput[]
  createMany?: Prisma.VendorColorCreateManyVendorInputEnvelope
  connect?: Prisma.VendorColorWhereUniqueInput | Prisma.VendorColorWhereUniqueInput[]
}

export type VendorColorUncheckedCreateNestedManyWithoutVendorInput = {
  create?: Prisma.XOR<Prisma.VendorColorCreateWithoutVendorInput, Prisma.VendorColorUncheckedCreateWithoutVendorInput> | Prisma.VendorColorCreateWithoutVendorInput[] | Prisma.VendorColorUncheckedCreateWithoutVendorInput[]
  connectOrCreate?: Prisma.VendorColorCreateOrConnectWithoutVendorInput | Prisma.VendorColorCreateOrConnectWithoutVendorInput[]
  createMany?: Prisma.VendorColorCreateManyVendorInputEnvelope
  connect?: Prisma.VendorColorWhereUniqueInput | Prisma.VendorColorWhereUniqueInput[]
}

export type VendorColorUpdateManyWithoutVendorNestedInput = {
  create?: Prisma.XOR<Prisma.VendorColorCreateWithoutVendorInput, Prisma.VendorColorUncheckedCreateWithoutVendorInput> | Prisma.VendorColorCreateWithoutVendorInput[] | Prisma.VendorColorUncheckedCreateWithoutVendorInput[]
  connectOrCreate?: Prisma.VendorColorCreateOrConnectWithoutVendorInput | Prisma.VendorColorCreateOrConnectWithoutVendorInput[]
  upsert?: Prisma.VendorColorUpsertWithWhereUniqueWithoutVendorInput | Prisma.VendorColorUpsertWithWhereUniqueWithoutVendorInput[]
  createMany?: Prisma.VendorColorCreateManyVendorInputEnvelope
  set?: Prisma.VendorColorWhereUniqueInput | Prisma.VendorColorWhereUniqueInput[]
  disconnect?: Prisma.VendorColorWhereUniqueInput | Prisma.VendorColorWhereUniqueInput[]
  delete?: Prisma.VendorColorWhereUniqueInput | Prisma.VendorColorWhereUniqueInput[]
  connect?: Prisma.VendorColorWhereUniqueInput | Prisma.VendorColorWhereUniqueInput[]
  update?: Prisma.VendorColorUpdateWithWhereUniqueWithoutVendorInput | Prisma.VendorColorUpdateWithWhereUniqueWithoutVendorInput[]
  updateMany?: Prisma.VendorColorUpdateManyWithWhereWithoutVendorInput | Prisma.VendorColorUpdateManyWithWhereWithoutVendorInput[]
  deleteMany?: Prisma.VendorColorScalarWhereInput | Prisma.VendorColorScalarWhereInput[]
}

export type VendorColorUncheckedUpdateManyWithoutVendorNestedInput = {
  create?: Prisma.XOR<Prisma.VendorColorCreateWithoutVendorInput, Prisma.VendorColorUncheckedCreateWithoutVendorInput> | Prisma.VendorColorCreateWithoutVendorInput[] | Prisma.VendorColorUncheckedCreateWithoutVendorInput[]
  connectOrCreate?: Prisma.VendorColorCreateOrConnectWithoutVendorInput | Prisma.VendorColorCreateOrConnectWithoutVendorInput[]
  upsert?: Prisma.VendorColorUpsertWithWhereUniqueWithoutVendorInput | Prisma.VendorColorUpsertWithWhereUniqueWithoutVendorInput[]
  createMany?: Prisma.VendorColorCreateManyVendorInputEnvelope
  set?: Prisma.VendorColorWhereUniqueInput | Prisma.VendorColorWhereUniqueInput[]
  disconnect?: Prisma.VendorColorWhereUniqueInput | Prisma.VendorColorWhereUniqueInput[]
  delete?: Prisma.VendorColorWhereUniqueInput | Prisma.VendorColorWhereUniqueInput[]
  connect?: Prisma.VendorColorWhereUniqueInput | Prisma.VendorColorWhereUniqueInput[]
  update?: Prisma.VendorColorUpdateWithWhereUniqueWithoutVendorInput | Prisma.VendorColorUpdateWithWhereUniqueWithoutVendorInput[]
  updateMany?: Prisma.VendorColorUpdateManyWithWhereWithoutVendorInput | Prisma.VendorColorUpdateManyWithWhereWithoutVendorInput[]
  deleteMany?: Prisma.VendorColorScalarWhereInput | Prisma.VendorColorScalarWhereInput[]
}

export type VendorColorCreateWithoutVendorInput = {
  color: string
  groups: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSrc?: string | null
  shopImageIds?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type VendorColorUncheckedCreateWithoutVendorInput = {
  color: string
  groups: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSrc?: string | null
  shopImageIds?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type VendorColorCreateOrConnectWithoutVendorInput = {
  where: Prisma.VendorColorWhereUniqueInput
  create: Prisma.XOR<Prisma.VendorColorCreateWithoutVendorInput, Prisma.VendorColorUncheckedCreateWithoutVendorInput>
}

export type VendorColorCreateManyVendorInputEnvelope = {
  data: Prisma.VendorColorCreateManyVendorInput | Prisma.VendorColorCreateManyVendorInput[]
}

export type VendorColorUpsertWithWhereUniqueWithoutVendorInput = {
  where: Prisma.VendorColorWhereUniqueInput
  update: Prisma.XOR<Prisma.VendorColorUpdateWithoutVendorInput, Prisma.VendorColorUncheckedUpdateWithoutVendorInput>
  create: Prisma.XOR<Prisma.VendorColorCreateWithoutVendorInput, Prisma.VendorColorUncheckedCreateWithoutVendorInput>
}

export type VendorColorUpdateWithWhereUniqueWithoutVendorInput = {
  where: Prisma.VendorColorWhereUniqueInput
  data: Prisma.XOR<Prisma.VendorColorUpdateWithoutVendorInput, Prisma.VendorColorUncheckedUpdateWithoutVendorInput>
}

export type VendorColorUpdateManyWithWhereWithoutVendorInput = {
  where: Prisma.VendorColorScalarWhereInput
  data: Prisma.XOR<Prisma.VendorColorUpdateManyMutationInput, Prisma.VendorColorUncheckedUpdateManyWithoutVendorInput>
}

export type VendorColorScalarWhereInput = {
  AND?: Prisma.VendorColorScalarWhereInput | Prisma.VendorColorScalarWhereInput[]
  OR?: Prisma.VendorColorScalarWhereInput[]
  NOT?: Prisma.VendorColorScalarWhereInput | Prisma.VendorColorScalarWhereInput[]
  vendorName?: Prisma.StringFilter<"VendorColor"> | string
  color?: Prisma.StringFilter<"VendorColor"> | string
  groups?: Prisma.JsonFilter<"VendorColor">
  imageSrc?: Prisma.StringNullableFilter<"VendorColor"> | string | null
  shopImageIds?: Prisma.JsonNullableFilter<"VendorColor">
}

export type VendorColorCreateManyVendorInput = {
  color: string
  groups: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSrc?: string | null
  shopImageIds?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type VendorColorUpdateWithoutVendorInput = {
  color?: Prisma.StringFieldUpdateOperationsInput | string
  groups?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSrc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  shopImageIds?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type VendorColorUncheckedUpdateWithoutVendorInput = {
  color?: Prisma.StringFieldUpdateOperationsInput | string
  groups?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSrc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  shopImageIds?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type VendorColorUncheckedUpdateManyWithoutVendorInput = {
  color?: Prisma.StringFieldUpdateOperationsInput | string
  groups?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageSrc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  shopImageIds?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}



export type VendorColorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  vendorName?: boolean
  color?: boolean
  groups?: boolean
  imageSrc?: boolean
  shopImageIds?: boolean
  vendor?: boolean | Prisma.VendorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["vendorColor"]>

export type VendorColorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  vendorName?: boolean
  color?: boolean
  groups?: boolean
  imageSrc?: boolean
  shopImageIds?: boolean
  vendor?: boolean | Prisma.VendorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["vendorColor"]>

export type VendorColorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  vendorName?: boolean
  color?: boolean
  groups?: boolean
  imageSrc?: boolean
  shopImageIds?: boolean
  vendor?: boolean | Prisma.VendorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["vendorColor"]>

export type VendorColorSelectScalar = {
  vendorName?: boolean
  color?: boolean
  groups?: boolean
  imageSrc?: boolean
  shopImageIds?: boolean
}

export type VendorColorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"vendorName" | "color" | "groups" | "imageSrc" | "shopImageIds", ExtArgs["result"]["vendorColor"]>
export type VendorColorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  vendor?: boolean | Prisma.VendorDefaultArgs<ExtArgs>
}
export type VendorColorIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  vendor?: boolean | Prisma.VendorDefaultArgs<ExtArgs>
}
export type VendorColorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  vendor?: boolean | Prisma.VendorDefaultArgs<ExtArgs>
}

export type $VendorColorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "VendorColor"
  objects: {
    vendor: Prisma.$VendorPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    vendorName: string
    color: string
    groups: runtime.JsonValue
    imageSrc: string | null
    shopImageIds: runtime.JsonValue | null
  }, ExtArgs["result"]["vendorColor"]>
  composites: {}
}

export type VendorColorGetPayload<S extends boolean | null | undefined | VendorColorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$VendorColorPayload, S>

export type VendorColorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<VendorColorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: VendorColorCountAggregateInputType | true
  }

export interface VendorColorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VendorColor'], meta: { name: 'VendorColor' } }
  /**
   * Find zero or one VendorColor that matches the filter.
   * @param {VendorColorFindUniqueArgs} args - Arguments to find a VendorColor
   * @example
   * // Get one VendorColor
   * const vendorColor = await prisma.vendorColor.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends VendorColorFindUniqueArgs>(args: Prisma.SelectSubset<T, VendorColorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__VendorColorClient<runtime.Types.Result.GetResult<Prisma.$VendorColorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one VendorColor that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {VendorColorFindUniqueOrThrowArgs} args - Arguments to find a VendorColor
   * @example
   * // Get one VendorColor
   * const vendorColor = await prisma.vendorColor.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends VendorColorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, VendorColorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__VendorColorClient<runtime.Types.Result.GetResult<Prisma.$VendorColorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first VendorColor that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VendorColorFindFirstArgs} args - Arguments to find a VendorColor
   * @example
   * // Get one VendorColor
   * const vendorColor = await prisma.vendorColor.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends VendorColorFindFirstArgs>(args?: Prisma.SelectSubset<T, VendorColorFindFirstArgs<ExtArgs>>): Prisma.Prisma__VendorColorClient<runtime.Types.Result.GetResult<Prisma.$VendorColorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first VendorColor that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VendorColorFindFirstOrThrowArgs} args - Arguments to find a VendorColor
   * @example
   * // Get one VendorColor
   * const vendorColor = await prisma.vendorColor.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends VendorColorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, VendorColorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__VendorColorClient<runtime.Types.Result.GetResult<Prisma.$VendorColorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more VendorColors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VendorColorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all VendorColors
   * const vendorColors = await prisma.vendorColor.findMany()
   * 
   * // Get first 10 VendorColors
   * const vendorColors = await prisma.vendorColor.findMany({ take: 10 })
   * 
   * // Only select the `vendorName`
   * const vendorColorWithVendorNameOnly = await prisma.vendorColor.findMany({ select: { vendorName: true } })
   * 
   */
  findMany<T extends VendorColorFindManyArgs>(args?: Prisma.SelectSubset<T, VendorColorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VendorColorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a VendorColor.
   * @param {VendorColorCreateArgs} args - Arguments to create a VendorColor.
   * @example
   * // Create one VendorColor
   * const VendorColor = await prisma.vendorColor.create({
   *   data: {
   *     // ... data to create a VendorColor
   *   }
   * })
   * 
   */
  create<T extends VendorColorCreateArgs>(args: Prisma.SelectSubset<T, VendorColorCreateArgs<ExtArgs>>): Prisma.Prisma__VendorColorClient<runtime.Types.Result.GetResult<Prisma.$VendorColorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many VendorColors.
   * @param {VendorColorCreateManyArgs} args - Arguments to create many VendorColors.
   * @example
   * // Create many VendorColors
   * const vendorColor = await prisma.vendorColor.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends VendorColorCreateManyArgs>(args?: Prisma.SelectSubset<T, VendorColorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many VendorColors and returns the data saved in the database.
   * @param {VendorColorCreateManyAndReturnArgs} args - Arguments to create many VendorColors.
   * @example
   * // Create many VendorColors
   * const vendorColor = await prisma.vendorColor.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many VendorColors and only return the `vendorName`
   * const vendorColorWithVendorNameOnly = await prisma.vendorColor.createManyAndReturn({
   *   select: { vendorName: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends VendorColorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, VendorColorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VendorColorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a VendorColor.
   * @param {VendorColorDeleteArgs} args - Arguments to delete one VendorColor.
   * @example
   * // Delete one VendorColor
   * const VendorColor = await prisma.vendorColor.delete({
   *   where: {
   *     // ... filter to delete one VendorColor
   *   }
   * })
   * 
   */
  delete<T extends VendorColorDeleteArgs>(args: Prisma.SelectSubset<T, VendorColorDeleteArgs<ExtArgs>>): Prisma.Prisma__VendorColorClient<runtime.Types.Result.GetResult<Prisma.$VendorColorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one VendorColor.
   * @param {VendorColorUpdateArgs} args - Arguments to update one VendorColor.
   * @example
   * // Update one VendorColor
   * const vendorColor = await prisma.vendorColor.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends VendorColorUpdateArgs>(args: Prisma.SelectSubset<T, VendorColorUpdateArgs<ExtArgs>>): Prisma.Prisma__VendorColorClient<runtime.Types.Result.GetResult<Prisma.$VendorColorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more VendorColors.
   * @param {VendorColorDeleteManyArgs} args - Arguments to filter VendorColors to delete.
   * @example
   * // Delete a few VendorColors
   * const { count } = await prisma.vendorColor.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends VendorColorDeleteManyArgs>(args?: Prisma.SelectSubset<T, VendorColorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more VendorColors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VendorColorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many VendorColors
   * const vendorColor = await prisma.vendorColor.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends VendorColorUpdateManyArgs>(args: Prisma.SelectSubset<T, VendorColorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more VendorColors and returns the data updated in the database.
   * @param {VendorColorUpdateManyAndReturnArgs} args - Arguments to update many VendorColors.
   * @example
   * // Update many VendorColors
   * const vendorColor = await prisma.vendorColor.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more VendorColors and only return the `vendorName`
   * const vendorColorWithVendorNameOnly = await prisma.vendorColor.updateManyAndReturn({
   *   select: { vendorName: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends VendorColorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, VendorColorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VendorColorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one VendorColor.
   * @param {VendorColorUpsertArgs} args - Arguments to update or create a VendorColor.
   * @example
   * // Update or create a VendorColor
   * const vendorColor = await prisma.vendorColor.upsert({
   *   create: {
   *     // ... data to create a VendorColor
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the VendorColor we want to update
   *   }
   * })
   */
  upsert<T extends VendorColorUpsertArgs>(args: Prisma.SelectSubset<T, VendorColorUpsertArgs<ExtArgs>>): Prisma.Prisma__VendorColorClient<runtime.Types.Result.GetResult<Prisma.$VendorColorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of VendorColors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VendorColorCountArgs} args - Arguments to filter VendorColors to count.
   * @example
   * // Count the number of VendorColors
   * const count = await prisma.vendorColor.count({
   *   where: {
   *     // ... the filter for the VendorColors we want to count
   *   }
   * })
  **/
  count<T extends VendorColorCountArgs>(
    args?: Prisma.Subset<T, VendorColorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], VendorColorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a VendorColor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VendorColorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends VendorColorAggregateArgs>(args: Prisma.Subset<T, VendorColorAggregateArgs>): Prisma.PrismaPromise<GetVendorColorAggregateType<T>>

  /**
   * Group by VendorColor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VendorColorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends VendorColorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: VendorColorGroupByArgs['orderBy'] }
      : { orderBy?: VendorColorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, VendorColorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendorColorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the VendorColor model
 */
readonly fields: VendorColorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for VendorColor.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__VendorColorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  vendor<T extends Prisma.VendorDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.VendorDefaultArgs<ExtArgs>>): Prisma.Prisma__VendorClient<runtime.Types.Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the VendorColor model
 */
export interface VendorColorFieldRefs {
  readonly vendorName: Prisma.FieldRef<"VendorColor", 'String'>
  readonly color: Prisma.FieldRef<"VendorColor", 'String'>
  readonly groups: Prisma.FieldRef<"VendorColor", 'Json'>
  readonly imageSrc: Prisma.FieldRef<"VendorColor", 'String'>
  readonly shopImageIds: Prisma.FieldRef<"VendorColor", 'Json'>
}
    

// Custom InputTypes
/**
 * VendorColor findUnique
 */
export type VendorColorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColor
   */
  select?: Prisma.VendorColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColor
   */
  omit?: Prisma.VendorColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VendorColorInclude<ExtArgs> | null
  /**
   * Filter, which VendorColor to fetch.
   */
  where: Prisma.VendorColorWhereUniqueInput
}

/**
 * VendorColor findUniqueOrThrow
 */
export type VendorColorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColor
   */
  select?: Prisma.VendorColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColor
   */
  omit?: Prisma.VendorColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VendorColorInclude<ExtArgs> | null
  /**
   * Filter, which VendorColor to fetch.
   */
  where: Prisma.VendorColorWhereUniqueInput
}

/**
 * VendorColor findFirst
 */
export type VendorColorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColor
   */
  select?: Prisma.VendorColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColor
   */
  omit?: Prisma.VendorColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VendorColorInclude<ExtArgs> | null
  /**
   * Filter, which VendorColor to fetch.
   */
  where?: Prisma.VendorColorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VendorColors to fetch.
   */
  orderBy?: Prisma.VendorColorOrderByWithRelationInput | Prisma.VendorColorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for VendorColors.
   */
  cursor?: Prisma.VendorColorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VendorColors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VendorColors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of VendorColors.
   */
  distinct?: Prisma.VendorColorScalarFieldEnum | Prisma.VendorColorScalarFieldEnum[]
}

/**
 * VendorColor findFirstOrThrow
 */
export type VendorColorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColor
   */
  select?: Prisma.VendorColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColor
   */
  omit?: Prisma.VendorColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VendorColorInclude<ExtArgs> | null
  /**
   * Filter, which VendorColor to fetch.
   */
  where?: Prisma.VendorColorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VendorColors to fetch.
   */
  orderBy?: Prisma.VendorColorOrderByWithRelationInput | Prisma.VendorColorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for VendorColors.
   */
  cursor?: Prisma.VendorColorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VendorColors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VendorColors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of VendorColors.
   */
  distinct?: Prisma.VendorColorScalarFieldEnum | Prisma.VendorColorScalarFieldEnum[]
}

/**
 * VendorColor findMany
 */
export type VendorColorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColor
   */
  select?: Prisma.VendorColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColor
   */
  omit?: Prisma.VendorColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VendorColorInclude<ExtArgs> | null
  /**
   * Filter, which VendorColors to fetch.
   */
  where?: Prisma.VendorColorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VendorColors to fetch.
   */
  orderBy?: Prisma.VendorColorOrderByWithRelationInput | Prisma.VendorColorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing VendorColors.
   */
  cursor?: Prisma.VendorColorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VendorColors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VendorColors.
   */
  skip?: number
  distinct?: Prisma.VendorColorScalarFieldEnum | Prisma.VendorColorScalarFieldEnum[]
}

/**
 * VendorColor create
 */
export type VendorColorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColor
   */
  select?: Prisma.VendorColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColor
   */
  omit?: Prisma.VendorColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VendorColorInclude<ExtArgs> | null
  /**
   * The data needed to create a VendorColor.
   */
  data: Prisma.XOR<Prisma.VendorColorCreateInput, Prisma.VendorColorUncheckedCreateInput>
}

/**
 * VendorColor createMany
 */
export type VendorColorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many VendorColors.
   */
  data: Prisma.VendorColorCreateManyInput | Prisma.VendorColorCreateManyInput[]
}

/**
 * VendorColor createManyAndReturn
 */
export type VendorColorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColor
   */
  select?: Prisma.VendorColorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColor
   */
  omit?: Prisma.VendorColorOmit<ExtArgs> | null
  /**
   * The data used to create many VendorColors.
   */
  data: Prisma.VendorColorCreateManyInput | Prisma.VendorColorCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VendorColorIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * VendorColor update
 */
export type VendorColorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColor
   */
  select?: Prisma.VendorColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColor
   */
  omit?: Prisma.VendorColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VendorColorInclude<ExtArgs> | null
  /**
   * The data needed to update a VendorColor.
   */
  data: Prisma.XOR<Prisma.VendorColorUpdateInput, Prisma.VendorColorUncheckedUpdateInput>
  /**
   * Choose, which VendorColor to update.
   */
  where: Prisma.VendorColorWhereUniqueInput
}

/**
 * VendorColor updateMany
 */
export type VendorColorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update VendorColors.
   */
  data: Prisma.XOR<Prisma.VendorColorUpdateManyMutationInput, Prisma.VendorColorUncheckedUpdateManyInput>
  /**
   * Filter which VendorColors to update
   */
  where?: Prisma.VendorColorWhereInput
  /**
   * Limit how many VendorColors to update.
   */
  limit?: number
}

/**
 * VendorColor updateManyAndReturn
 */
export type VendorColorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColor
   */
  select?: Prisma.VendorColorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColor
   */
  omit?: Prisma.VendorColorOmit<ExtArgs> | null
  /**
   * The data used to update VendorColors.
   */
  data: Prisma.XOR<Prisma.VendorColorUpdateManyMutationInput, Prisma.VendorColorUncheckedUpdateManyInput>
  /**
   * Filter which VendorColors to update
   */
  where?: Prisma.VendorColorWhereInput
  /**
   * Limit how many VendorColors to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VendorColorIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * VendorColor upsert
 */
export type VendorColorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColor
   */
  select?: Prisma.VendorColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColor
   */
  omit?: Prisma.VendorColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VendorColorInclude<ExtArgs> | null
  /**
   * The filter to search for the VendorColor to update in case it exists.
   */
  where: Prisma.VendorColorWhereUniqueInput
  /**
   * In case the VendorColor found by the `where` argument doesn't exist, create a new VendorColor with this data.
   */
  create: Prisma.XOR<Prisma.VendorColorCreateInput, Prisma.VendorColorUncheckedCreateInput>
  /**
   * In case the VendorColor was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.VendorColorUpdateInput, Prisma.VendorColorUncheckedUpdateInput>
}

/**
 * VendorColor delete
 */
export type VendorColorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColor
   */
  select?: Prisma.VendorColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColor
   */
  omit?: Prisma.VendorColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VendorColorInclude<ExtArgs> | null
  /**
   * Filter which VendorColor to delete.
   */
  where: Prisma.VendorColorWhereUniqueInput
}

/**
 * VendorColor deleteMany
 */
export type VendorColorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which VendorColors to delete
   */
  where?: Prisma.VendorColorWhereInput
  /**
   * Limit how many VendorColors to delete.
   */
  limit?: number
}

/**
 * VendorColor without action
 */
export type VendorColorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColor
   */
  select?: Prisma.VendorColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColor
   */
  omit?: Prisma.VendorColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VendorColorInclude<ExtArgs> | null
}
