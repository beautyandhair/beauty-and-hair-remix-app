
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `VendorColorGroup` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model VendorColorGroup
 * 
 */
export type VendorColorGroupModel = runtime.Types.Result.DefaultSelection<Prisma.$VendorColorGroupPayload>

export type AggregateVendorColorGroup = {
  _count: VendorColorGroupCountAggregateOutputType | null
  _min: VendorColorGroupMinAggregateOutputType | null
  _max: VendorColorGroupMaxAggregateOutputType | null
}

export type VendorColorGroupMinAggregateOutputType = {
  vendor: string | null
}

export type VendorColorGroupMaxAggregateOutputType = {
  vendor: string | null
}

export type VendorColorGroupCountAggregateOutputType = {
  vendor: number
  colors: number
  _all: number
}


export type VendorColorGroupMinAggregateInputType = {
  vendor?: true
}

export type VendorColorGroupMaxAggregateInputType = {
  vendor?: true
}

export type VendorColorGroupCountAggregateInputType = {
  vendor?: true
  colors?: true
  _all?: true
}

export type VendorColorGroupAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which VendorColorGroup to aggregate.
   */
  where?: Prisma.VendorColorGroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VendorColorGroups to fetch.
   */
  orderBy?: Prisma.VendorColorGroupOrderByWithRelationInput | Prisma.VendorColorGroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.VendorColorGroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VendorColorGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VendorColorGroups.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned VendorColorGroups
  **/
  _count?: true | VendorColorGroupCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: VendorColorGroupMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: VendorColorGroupMaxAggregateInputType
}

export type GetVendorColorGroupAggregateType<T extends VendorColorGroupAggregateArgs> = {
      [P in keyof T & keyof AggregateVendorColorGroup]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateVendorColorGroup[P]>
    : Prisma.GetScalarType<T[P], AggregateVendorColorGroup[P]>
}




export type VendorColorGroupGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.VendorColorGroupWhereInput
  orderBy?: Prisma.VendorColorGroupOrderByWithAggregationInput | Prisma.VendorColorGroupOrderByWithAggregationInput[]
  by: Prisma.VendorColorGroupScalarFieldEnum[] | Prisma.VendorColorGroupScalarFieldEnum
  having?: Prisma.VendorColorGroupScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: VendorColorGroupCountAggregateInputType | true
  _min?: VendorColorGroupMinAggregateInputType
  _max?: VendorColorGroupMaxAggregateInputType
}

export type VendorColorGroupGroupByOutputType = {
  vendor: string
  colors: runtime.JsonValue | null
  _count: VendorColorGroupCountAggregateOutputType | null
  _min: VendorColorGroupMinAggregateOutputType | null
  _max: VendorColorGroupMaxAggregateOutputType | null
}

type GetVendorColorGroupGroupByPayload<T extends VendorColorGroupGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<VendorColorGroupGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof VendorColorGroupGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], VendorColorGroupGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], VendorColorGroupGroupByOutputType[P]>
      }
    >
  > 



export type VendorColorGroupWhereInput = {
  AND?: Prisma.VendorColorGroupWhereInput | Prisma.VendorColorGroupWhereInput[]
  OR?: Prisma.VendorColorGroupWhereInput[]
  NOT?: Prisma.VendorColorGroupWhereInput | Prisma.VendorColorGroupWhereInput[]
  vendor?: Prisma.StringFilter<"VendorColorGroup"> | string
  colors?: Prisma.JsonNullableFilter<"VendorColorGroup">
}

export type VendorColorGroupOrderByWithRelationInput = {
  vendor?: Prisma.SortOrder
  colors?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type VendorColorGroupWhereUniqueInput = Prisma.AtLeast<{
  vendor?: string
  AND?: Prisma.VendorColorGroupWhereInput | Prisma.VendorColorGroupWhereInput[]
  OR?: Prisma.VendorColorGroupWhereInput[]
  NOT?: Prisma.VendorColorGroupWhereInput | Prisma.VendorColorGroupWhereInput[]
  colors?: Prisma.JsonNullableFilter<"VendorColorGroup">
}, "vendor" | "vendor">

export type VendorColorGroupOrderByWithAggregationInput = {
  vendor?: Prisma.SortOrder
  colors?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.VendorColorGroupCountOrderByAggregateInput
  _max?: Prisma.VendorColorGroupMaxOrderByAggregateInput
  _min?: Prisma.VendorColorGroupMinOrderByAggregateInput
}

export type VendorColorGroupScalarWhereWithAggregatesInput = {
  AND?: Prisma.VendorColorGroupScalarWhereWithAggregatesInput | Prisma.VendorColorGroupScalarWhereWithAggregatesInput[]
  OR?: Prisma.VendorColorGroupScalarWhereWithAggregatesInput[]
  NOT?: Prisma.VendorColorGroupScalarWhereWithAggregatesInput | Prisma.VendorColorGroupScalarWhereWithAggregatesInput[]
  vendor?: Prisma.StringWithAggregatesFilter<"VendorColorGroup"> | string
  colors?: Prisma.JsonNullableWithAggregatesFilter<"VendorColorGroup">
}

export type VendorColorGroupCreateInput = {
  vendor: string
  colors?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type VendorColorGroupUncheckedCreateInput = {
  vendor: string
  colors?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type VendorColorGroupUpdateInput = {
  vendor?: Prisma.StringFieldUpdateOperationsInput | string
  colors?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type VendorColorGroupUncheckedUpdateInput = {
  vendor?: Prisma.StringFieldUpdateOperationsInput | string
  colors?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type VendorColorGroupCreateManyInput = {
  vendor: string
  colors?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type VendorColorGroupUpdateManyMutationInput = {
  vendor?: Prisma.StringFieldUpdateOperationsInput | string
  colors?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type VendorColorGroupUncheckedUpdateManyInput = {
  vendor?: Prisma.StringFieldUpdateOperationsInput | string
  colors?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type VendorColorGroupCountOrderByAggregateInput = {
  vendor?: Prisma.SortOrder
  colors?: Prisma.SortOrder
}

export type VendorColorGroupMaxOrderByAggregateInput = {
  vendor?: Prisma.SortOrder
}

export type VendorColorGroupMinOrderByAggregateInput = {
  vendor?: Prisma.SortOrder
}



export type VendorColorGroupSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  vendor?: boolean
  colors?: boolean
}, ExtArgs["result"]["vendorColorGroup"]>

export type VendorColorGroupSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  vendor?: boolean
  colors?: boolean
}, ExtArgs["result"]["vendorColorGroup"]>

export type VendorColorGroupSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  vendor?: boolean
  colors?: boolean
}, ExtArgs["result"]["vendorColorGroup"]>

export type VendorColorGroupSelectScalar = {
  vendor?: boolean
  colors?: boolean
}

export type VendorColorGroupOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"vendor" | "colors", ExtArgs["result"]["vendorColorGroup"]>

export type $VendorColorGroupPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "VendorColorGroup"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    vendor: string
    colors: runtime.JsonValue | null
  }, ExtArgs["result"]["vendorColorGroup"]>
  composites: {}
}

export type VendorColorGroupGetPayload<S extends boolean | null | undefined | VendorColorGroupDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$VendorColorGroupPayload, S>

export type VendorColorGroupCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<VendorColorGroupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: VendorColorGroupCountAggregateInputType | true
  }

export interface VendorColorGroupDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VendorColorGroup'], meta: { name: 'VendorColorGroup' } }
  /**
   * Find zero or one VendorColorGroup that matches the filter.
   * @param {VendorColorGroupFindUniqueArgs} args - Arguments to find a VendorColorGroup
   * @example
   * // Get one VendorColorGroup
   * const vendorColorGroup = await prisma.vendorColorGroup.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends VendorColorGroupFindUniqueArgs>(args: Prisma.SelectSubset<T, VendorColorGroupFindUniqueArgs<ExtArgs>>): Prisma.Prisma__VendorColorGroupClient<runtime.Types.Result.GetResult<Prisma.$VendorColorGroupPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one VendorColorGroup that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {VendorColorGroupFindUniqueOrThrowArgs} args - Arguments to find a VendorColorGroup
   * @example
   * // Get one VendorColorGroup
   * const vendorColorGroup = await prisma.vendorColorGroup.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends VendorColorGroupFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, VendorColorGroupFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__VendorColorGroupClient<runtime.Types.Result.GetResult<Prisma.$VendorColorGroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first VendorColorGroup that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VendorColorGroupFindFirstArgs} args - Arguments to find a VendorColorGroup
   * @example
   * // Get one VendorColorGroup
   * const vendorColorGroup = await prisma.vendorColorGroup.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends VendorColorGroupFindFirstArgs>(args?: Prisma.SelectSubset<T, VendorColorGroupFindFirstArgs<ExtArgs>>): Prisma.Prisma__VendorColorGroupClient<runtime.Types.Result.GetResult<Prisma.$VendorColorGroupPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first VendorColorGroup that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VendorColorGroupFindFirstOrThrowArgs} args - Arguments to find a VendorColorGroup
   * @example
   * // Get one VendorColorGroup
   * const vendorColorGroup = await prisma.vendorColorGroup.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends VendorColorGroupFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, VendorColorGroupFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__VendorColorGroupClient<runtime.Types.Result.GetResult<Prisma.$VendorColorGroupPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more VendorColorGroups that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VendorColorGroupFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all VendorColorGroups
   * const vendorColorGroups = await prisma.vendorColorGroup.findMany()
   * 
   * // Get first 10 VendorColorGroups
   * const vendorColorGroups = await prisma.vendorColorGroup.findMany({ take: 10 })
   * 
   * // Only select the `vendor`
   * const vendorColorGroupWithVendorOnly = await prisma.vendorColorGroup.findMany({ select: { vendor: true } })
   * 
   */
  findMany<T extends VendorColorGroupFindManyArgs>(args?: Prisma.SelectSubset<T, VendorColorGroupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VendorColorGroupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a VendorColorGroup.
   * @param {VendorColorGroupCreateArgs} args - Arguments to create a VendorColorGroup.
   * @example
   * // Create one VendorColorGroup
   * const VendorColorGroup = await prisma.vendorColorGroup.create({
   *   data: {
   *     // ... data to create a VendorColorGroup
   *   }
   * })
   * 
   */
  create<T extends VendorColorGroupCreateArgs>(args: Prisma.SelectSubset<T, VendorColorGroupCreateArgs<ExtArgs>>): Prisma.Prisma__VendorColorGroupClient<runtime.Types.Result.GetResult<Prisma.$VendorColorGroupPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many VendorColorGroups.
   * @param {VendorColorGroupCreateManyArgs} args - Arguments to create many VendorColorGroups.
   * @example
   * // Create many VendorColorGroups
   * const vendorColorGroup = await prisma.vendorColorGroup.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends VendorColorGroupCreateManyArgs>(args?: Prisma.SelectSubset<T, VendorColorGroupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many VendorColorGroups and returns the data saved in the database.
   * @param {VendorColorGroupCreateManyAndReturnArgs} args - Arguments to create many VendorColorGroups.
   * @example
   * // Create many VendorColorGroups
   * const vendorColorGroup = await prisma.vendorColorGroup.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many VendorColorGroups and only return the `vendor`
   * const vendorColorGroupWithVendorOnly = await prisma.vendorColorGroup.createManyAndReturn({
   *   select: { vendor: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends VendorColorGroupCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, VendorColorGroupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VendorColorGroupPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a VendorColorGroup.
   * @param {VendorColorGroupDeleteArgs} args - Arguments to delete one VendorColorGroup.
   * @example
   * // Delete one VendorColorGroup
   * const VendorColorGroup = await prisma.vendorColorGroup.delete({
   *   where: {
   *     // ... filter to delete one VendorColorGroup
   *   }
   * })
   * 
   */
  delete<T extends VendorColorGroupDeleteArgs>(args: Prisma.SelectSubset<T, VendorColorGroupDeleteArgs<ExtArgs>>): Prisma.Prisma__VendorColorGroupClient<runtime.Types.Result.GetResult<Prisma.$VendorColorGroupPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one VendorColorGroup.
   * @param {VendorColorGroupUpdateArgs} args - Arguments to update one VendorColorGroup.
   * @example
   * // Update one VendorColorGroup
   * const vendorColorGroup = await prisma.vendorColorGroup.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends VendorColorGroupUpdateArgs>(args: Prisma.SelectSubset<T, VendorColorGroupUpdateArgs<ExtArgs>>): Prisma.Prisma__VendorColorGroupClient<runtime.Types.Result.GetResult<Prisma.$VendorColorGroupPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more VendorColorGroups.
   * @param {VendorColorGroupDeleteManyArgs} args - Arguments to filter VendorColorGroups to delete.
   * @example
   * // Delete a few VendorColorGroups
   * const { count } = await prisma.vendorColorGroup.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends VendorColorGroupDeleteManyArgs>(args?: Prisma.SelectSubset<T, VendorColorGroupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more VendorColorGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VendorColorGroupUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many VendorColorGroups
   * const vendorColorGroup = await prisma.vendorColorGroup.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends VendorColorGroupUpdateManyArgs>(args: Prisma.SelectSubset<T, VendorColorGroupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more VendorColorGroups and returns the data updated in the database.
   * @param {VendorColorGroupUpdateManyAndReturnArgs} args - Arguments to update many VendorColorGroups.
   * @example
   * // Update many VendorColorGroups
   * const vendorColorGroup = await prisma.vendorColorGroup.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more VendorColorGroups and only return the `vendor`
   * const vendorColorGroupWithVendorOnly = await prisma.vendorColorGroup.updateManyAndReturn({
   *   select: { vendor: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends VendorColorGroupUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, VendorColorGroupUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VendorColorGroupPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one VendorColorGroup.
   * @param {VendorColorGroupUpsertArgs} args - Arguments to update or create a VendorColorGroup.
   * @example
   * // Update or create a VendorColorGroup
   * const vendorColorGroup = await prisma.vendorColorGroup.upsert({
   *   create: {
   *     // ... data to create a VendorColorGroup
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the VendorColorGroup we want to update
   *   }
   * })
   */
  upsert<T extends VendorColorGroupUpsertArgs>(args: Prisma.SelectSubset<T, VendorColorGroupUpsertArgs<ExtArgs>>): Prisma.Prisma__VendorColorGroupClient<runtime.Types.Result.GetResult<Prisma.$VendorColorGroupPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of VendorColorGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VendorColorGroupCountArgs} args - Arguments to filter VendorColorGroups to count.
   * @example
   * // Count the number of VendorColorGroups
   * const count = await prisma.vendorColorGroup.count({
   *   where: {
   *     // ... the filter for the VendorColorGroups we want to count
   *   }
   * })
  **/
  count<T extends VendorColorGroupCountArgs>(
    args?: Prisma.Subset<T, VendorColorGroupCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], VendorColorGroupCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a VendorColorGroup.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VendorColorGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends VendorColorGroupAggregateArgs>(args: Prisma.Subset<T, VendorColorGroupAggregateArgs>): Prisma.PrismaPromise<GetVendorColorGroupAggregateType<T>>

  /**
   * Group by VendorColorGroup.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VendorColorGroupGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends VendorColorGroupGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: VendorColorGroupGroupByArgs['orderBy'] }
      : { orderBy?: VendorColorGroupGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, VendorColorGroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendorColorGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the VendorColorGroup model
 */
readonly fields: VendorColorGroupFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for VendorColorGroup.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__VendorColorGroupClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the VendorColorGroup model
 */
export interface VendorColorGroupFieldRefs {
  readonly vendor: Prisma.FieldRef<"VendorColorGroup", 'String'>
  readonly colors: Prisma.FieldRef<"VendorColorGroup", 'Json'>
}
    

// Custom InputTypes
/**
 * VendorColorGroup findUnique
 */
export type VendorColorGroupFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColorGroup
   */
  select?: Prisma.VendorColorGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColorGroup
   */
  omit?: Prisma.VendorColorGroupOmit<ExtArgs> | null
  /**
   * Filter, which VendorColorGroup to fetch.
   */
  where: Prisma.VendorColorGroupWhereUniqueInput
}

/**
 * VendorColorGroup findUniqueOrThrow
 */
export type VendorColorGroupFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColorGroup
   */
  select?: Prisma.VendorColorGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColorGroup
   */
  omit?: Prisma.VendorColorGroupOmit<ExtArgs> | null
  /**
   * Filter, which VendorColorGroup to fetch.
   */
  where: Prisma.VendorColorGroupWhereUniqueInput
}

/**
 * VendorColorGroup findFirst
 */
export type VendorColorGroupFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColorGroup
   */
  select?: Prisma.VendorColorGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColorGroup
   */
  omit?: Prisma.VendorColorGroupOmit<ExtArgs> | null
  /**
   * Filter, which VendorColorGroup to fetch.
   */
  where?: Prisma.VendorColorGroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VendorColorGroups to fetch.
   */
  orderBy?: Prisma.VendorColorGroupOrderByWithRelationInput | Prisma.VendorColorGroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for VendorColorGroups.
   */
  cursor?: Prisma.VendorColorGroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VendorColorGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VendorColorGroups.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of VendorColorGroups.
   */
  distinct?: Prisma.VendorColorGroupScalarFieldEnum | Prisma.VendorColorGroupScalarFieldEnum[]
}

/**
 * VendorColorGroup findFirstOrThrow
 */
export type VendorColorGroupFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColorGroup
   */
  select?: Prisma.VendorColorGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColorGroup
   */
  omit?: Prisma.VendorColorGroupOmit<ExtArgs> | null
  /**
   * Filter, which VendorColorGroup to fetch.
   */
  where?: Prisma.VendorColorGroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VendorColorGroups to fetch.
   */
  orderBy?: Prisma.VendorColorGroupOrderByWithRelationInput | Prisma.VendorColorGroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for VendorColorGroups.
   */
  cursor?: Prisma.VendorColorGroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VendorColorGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VendorColorGroups.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of VendorColorGroups.
   */
  distinct?: Prisma.VendorColorGroupScalarFieldEnum | Prisma.VendorColorGroupScalarFieldEnum[]
}

/**
 * VendorColorGroup findMany
 */
export type VendorColorGroupFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColorGroup
   */
  select?: Prisma.VendorColorGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColorGroup
   */
  omit?: Prisma.VendorColorGroupOmit<ExtArgs> | null
  /**
   * Filter, which VendorColorGroups to fetch.
   */
  where?: Prisma.VendorColorGroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VendorColorGroups to fetch.
   */
  orderBy?: Prisma.VendorColorGroupOrderByWithRelationInput | Prisma.VendorColorGroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing VendorColorGroups.
   */
  cursor?: Prisma.VendorColorGroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VendorColorGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VendorColorGroups.
   */
  skip?: number
  distinct?: Prisma.VendorColorGroupScalarFieldEnum | Prisma.VendorColorGroupScalarFieldEnum[]
}

/**
 * VendorColorGroup create
 */
export type VendorColorGroupCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColorGroup
   */
  select?: Prisma.VendorColorGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColorGroup
   */
  omit?: Prisma.VendorColorGroupOmit<ExtArgs> | null
  /**
   * The data needed to create a VendorColorGroup.
   */
  data: Prisma.XOR<Prisma.VendorColorGroupCreateInput, Prisma.VendorColorGroupUncheckedCreateInput>
}

/**
 * VendorColorGroup createMany
 */
export type VendorColorGroupCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many VendorColorGroups.
   */
  data: Prisma.VendorColorGroupCreateManyInput | Prisma.VendorColorGroupCreateManyInput[]
}

/**
 * VendorColorGroup createManyAndReturn
 */
export type VendorColorGroupCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColorGroup
   */
  select?: Prisma.VendorColorGroupSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColorGroup
   */
  omit?: Prisma.VendorColorGroupOmit<ExtArgs> | null
  /**
   * The data used to create many VendorColorGroups.
   */
  data: Prisma.VendorColorGroupCreateManyInput | Prisma.VendorColorGroupCreateManyInput[]
}

/**
 * VendorColorGroup update
 */
export type VendorColorGroupUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColorGroup
   */
  select?: Prisma.VendorColorGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColorGroup
   */
  omit?: Prisma.VendorColorGroupOmit<ExtArgs> | null
  /**
   * The data needed to update a VendorColorGroup.
   */
  data: Prisma.XOR<Prisma.VendorColorGroupUpdateInput, Prisma.VendorColorGroupUncheckedUpdateInput>
  /**
   * Choose, which VendorColorGroup to update.
   */
  where: Prisma.VendorColorGroupWhereUniqueInput
}

/**
 * VendorColorGroup updateMany
 */
export type VendorColorGroupUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update VendorColorGroups.
   */
  data: Prisma.XOR<Prisma.VendorColorGroupUpdateManyMutationInput, Prisma.VendorColorGroupUncheckedUpdateManyInput>
  /**
   * Filter which VendorColorGroups to update
   */
  where?: Prisma.VendorColorGroupWhereInput
  /**
   * Limit how many VendorColorGroups to update.
   */
  limit?: number
}

/**
 * VendorColorGroup updateManyAndReturn
 */
export type VendorColorGroupUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColorGroup
   */
  select?: Prisma.VendorColorGroupSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColorGroup
   */
  omit?: Prisma.VendorColorGroupOmit<ExtArgs> | null
  /**
   * The data used to update VendorColorGroups.
   */
  data: Prisma.XOR<Prisma.VendorColorGroupUpdateManyMutationInput, Prisma.VendorColorGroupUncheckedUpdateManyInput>
  /**
   * Filter which VendorColorGroups to update
   */
  where?: Prisma.VendorColorGroupWhereInput
  /**
   * Limit how many VendorColorGroups to update.
   */
  limit?: number
}

/**
 * VendorColorGroup upsert
 */
export type VendorColorGroupUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColorGroup
   */
  select?: Prisma.VendorColorGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColorGroup
   */
  omit?: Prisma.VendorColorGroupOmit<ExtArgs> | null
  /**
   * The filter to search for the VendorColorGroup to update in case it exists.
   */
  where: Prisma.VendorColorGroupWhereUniqueInput
  /**
   * In case the VendorColorGroup found by the `where` argument doesn't exist, create a new VendorColorGroup with this data.
   */
  create: Prisma.XOR<Prisma.VendorColorGroupCreateInput, Prisma.VendorColorGroupUncheckedCreateInput>
  /**
   * In case the VendorColorGroup was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.VendorColorGroupUpdateInput, Prisma.VendorColorGroupUncheckedUpdateInput>
}

/**
 * VendorColorGroup delete
 */
export type VendorColorGroupDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColorGroup
   */
  select?: Prisma.VendorColorGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColorGroup
   */
  omit?: Prisma.VendorColorGroupOmit<ExtArgs> | null
  /**
   * Filter which VendorColorGroup to delete.
   */
  where: Prisma.VendorColorGroupWhereUniqueInput
}

/**
 * VendorColorGroup deleteMany
 */
export type VendorColorGroupDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which VendorColorGroups to delete
   */
  where?: Prisma.VendorColorGroupWhereInput
  /**
   * Limit how many VendorColorGroups to delete.
   */
  limit?: number
}

/**
 * VendorColorGroup without action
 */
export type VendorColorGroupDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VendorColorGroup
   */
  select?: Prisma.VendorColorGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VendorColorGroup
   */
  omit?: Prisma.VendorColorGroupOmit<ExtArgs> | null
}
